# -*- coding: utf-8 -*-
"""electricity usage.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sl7jqP5GyKashkFo68-u7NJhGxn6bEqJ
"""

import os
print(os.getcwd())

import pandas as pd
df=pd.read_excel("data_cleaning.xlsx",sheet_name="Usage")

df.head(5)

import pandas as pd
import re

df.columns = ['col']
df['time'] = df['col'].apply(lambda x: re.findall(r'\d{1,2}\s*[APap][Mm]', x))

# Extract electricity usage
df['electricity_usage'] = df['col'].apply(lambda x: re.findall(r'[0-9]{1}\.[0-9]{2,3}', x))

# Extract date
df['date'] = df['col'].apply(lambda x: re.findall(r'\d{1,2}(?:st|nd|rd|th)?-[A-Za-z]+-\d{4}', x))
df['time'] = df['time'].apply(lambda x: x[0])
df['electricity_usage'] = df['electricity_usage'].apply(lambda x: x[0])
df['date'] = df['date'].apply(lambda x: x[0])
print(df)
print(df)

df.drop(columns=['col'], inplace=True)

df.head(5)

df.shape

df['date'] = pd.to_datetime(df['date'])

# Extracting the week name
df['week_name'] = df['date'].dt.day_name()

# Displaying the DataFrame with the new 'week_name' column
print(df)

df.isnull().sum()

df.dtypes

df.head(10)

df['time'] = df['time'].str.strip()

# Convert the 'time' column to datetime and extract the hour
df['hour'] = pd.to_datetime(df['time'], format='%I %p').dt.hour

# Print the updated DataFrame
print(df)

df.tail(10)

df['time'] = df['time'].str.replace(" ", "")

# Extract hour from the "time" column
df['hour'] = pd.to_datetime(df['time'], format='%I%p').dt.hour

# Display the resulting DataFrame
print(df[['time', 'hour']])

df.head(5)

contract=pd.read_excel("contract.xlsx")
contract.head(5)

import pandas as pd

# Your contract data
contract = {
    'No Flex': {
        'Rate': 0.21,
        'Unit': '$/kWh'
    },
    'Monthly Flex': {
        'January': 0.20,
        'February': 0.19,
        'March': 0.17,
        'April': 0.18,
        'May': 0.22,
        'June': 0.27,
        'July': 0.24,
        'August': 0.19,
        'September': 0.18,
        'October': 0.15,
        'November': 0.14,
        'December': 0.19,
        'Unit': '$/kWh'
    },
    'Hourly Flex': {
        '12AM until 1AM': 0.10,
        '1AM until 2AM': 0.10,
        '2AM until 3AM': 0.10,
        '3AM until 4AM': 0.10,
        '4AM until 5AM': 0.15,
        '5AM until 6AM': 0.20,
        '6AM until 7AM': 0.24,
        '7AM until 8AM': 0.24,
        '8AM until 9AM': 0.26,
        '9AM until 10AM': 0.20,
        '10AM until 11AM': 0.20,
        '11AM until 12PM': 0.26,
        '12PM until 1PM': 0.26,
        '1PM until 2PM': 0.20,
        '2PM until 3PM': 0.24,
        '3PM until 4PM': 0.18,
        '4PM until 5PM': 0.15,
        '5PM until 6PM': 0.30,
        '6PM until 7PM': 0.24,
        '7PM until 8PM': 0.24,
        '8PM until 9PM': 0.12,
        '9PM until 10PM': 0.11,
        '10PM until 11PM': 0.10,
        '11PM until 12AM': 0.10,
        'Unit': '$/kWh'
    }
}

# Create DataFrames from the contract data
no_flex_df = pd.DataFrame.from_dict(contract['No Flex'], orient='index', columns=['Value'])
monthly_flex_df = pd.DataFrame.from_dict(contract['Monthly Flex'], orient='index', columns=['Value'])
hourly_flex_df = pd.DataFrame.from_dict(contract['Hourly Flex'], orient='index', columns=['Value'])

# Write DataFrames to Excel files
no_flex_df.to_excel('No_Flex_Contract.xlsx', header=False)
monthly_flex_df.to_excel('Monthly_Flex_Contract.xlsx', header=False)
hourly_flex_df.to_excel('Hourly_Flex_Contract.xlsx', header=False)

no_flex_df.head()

monthly_flex_df.head(10)

hourly_flex_df.head()

#1. Question 1 What is your average hourly electricity usage?

# Convert 'electricity_usage' to numeric
df['electricity_usage'] = pd.to_numeric(df['electricity_usage'], errors='coerce')

# Calculate the average hourly electricity usage
average_hourly_usage = df['electricity_usage'].mean()

print("Average Hourly Electricity Usage:", average_hourly_usage)

#correct answer is B

#second way for first question
# Convert "electricity_usage" to numeric
df['electricity_usage'] = pd.to_numeric(df['electricity_usage'], errors='coerce')

# Group by hour and calculate the average electricity usage
average_hourly_usage = df.groupby('hour')['electricity_usage'].mean().reset_index()

# Display the resulting DataFrame
print(average_hourly_usage)
df_average_hourly_usage = pd.DataFrame(average_hourly_usage)

# Calculate the mean of electricity usage
mean_usage = df_average_hourly_usage['electricity_usage'].mean()

# Display the mean
print("Mean Electricity Usage:", mean_usage)

#correct answer is B

#2. What is your average electricity usage perhour in February?

# Calculate the average electricity usage per hour in February
df['date'] = pd.to_datetime(df['date'], errors='coerce')

february_data = df[(df['date'].dt.month == 2)]

average_hourly_usage_february = february_data['electricity_usage'].mean()

print("Average Electricity Usage per Hour in February:", average_hourly_usage_february)

#correct answer is D

#3. Which day of the week has the highestaverage usage?

#Which day of the week has the highestaverage usage?
df['day_of_week'] = df['date'].dt.day_name()

# Group by day of the week and calculate the average electricity usage
average_usage_by_day = df.groupby('day_of_week')['electricity_usage'].mean()

# Find the day with the highest average usage
day_highest_average_usage = average_usage_by_day.idxmax()
highest_average_usage = average_usage_by_day.max()

print("Day with the Highest Average Electricity Usage:", day_highest_average_usage)
print("Highest Average Electricity Usage:", highest_average_usage)


#correct answer is A

df.head(10)

df.dtypes

#Question 4 What is the highest amount of electricityused in a continuous 4 hour period?


# Sort the DataFrame by the 'date' and 'hour' columns
df.sort_values(['date', 'hour'], inplace=True)

# Create a new column for the rolling sum of electricity usage over a 4-hour window
df['rolling_sum'] = df['electricity_usage'].rolling(window=4).sum()

# Find the maximum value in the 'rolling_sum' column
max_value = df['rolling_sum'].max()

# Print the result
print("The highest amount of electricity used in a continuous 4-hour period is: {:.3f} kWh".format(max_value))

#correct answer is A

df['month'] = df['date'].dt.month_name()
df.head()

monthly_flex_df = pd.DataFrame({
    'Month': ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
    'Rate': [0.2, 0.19, 0.17, 0.18, 0.22, 0.27, 0.24, 0.19, 0.18, 0.15, 0.14, 0.19]
})

# Merge dataframes on 'month' column
merged_df = pd.merge(df, monthly_flex_df, left_on='month', right_on='Month', how='left')

# Multiply electricity usage by the monthly rate to get the cost
merged_df['monthly_cost'] = merged_df['electricity_usage'] * merged_df['Rate']

# Sum the monthly costs to get the total annual cost
annual_cost = merged_df['monthly_cost'].sum()

print(f"The annual cost of electricity under the 'Monthly Flex' contract is: ${annual_cost:.2f}")

#Question 5 Based on your historic electricity usage, what would your annual cost of electricitybe under the "Monthly Flex" contract?
# Your contract data
monthly_flex_contract = {
    'January': 0.20,
    'February': 0.19,
    'March': 0.17,
    'April': 0.18,
    'May': 0.22,
    'June': 0.27,
    'July': 0.24,
    'August': 0.19,
    'September': 0.18,
    'October': 0.15,
    'November': 0.14,
    'December': 0.19,
}

# Calculate the cost for each month
df['monthly_cost'] = df['month'].map(monthly_flex_contract) * df['electricity_usage']

print("\nIntermediate DataFrame with Monthly Costs:")
print(df[['month', 'electricity_usage', 'monthly_cost']].head())

# Calculate the annual cost
annual_cost_monthly_flex = df['monthly_cost'].sum()

print("\nAnnual Cost of Electricity under Monthly Flex Contract:", annual_cost_monthly_flex)

#correct answer is B

#Question 6 Based on your historic electricity usage, which of the three contracts would pro- duce the lowest annual cost?
# Calculate the annual cost for each contract
annual_costs = {}

for contract_name, rates in contract.items():
    monthly_cost = df['month'].map(rates) * df['electricity_usage']
    annual_cost = monthly_cost.sum()
    annual_costs[contract_name] = annual_cost

# Find the contract with the lowest annual cost
lowest_cost_contract = min(annual_costs, key=annual_costs.get)

print("Lowest Annual Cost Contract:", lowest_cost_contract)
print("Annual Cost:", annual_costs[lowest_cost_contract])


#correct answer is A

